name: Run End-to-End Tests
concurrency: UI_TESTS
env:

  # OAuth tokens for up to 8 test users.
  #
  # TODO Explain these environment variables, and the fact that they are not required.
  USER_1: ${{ secrets.USER_1 }}
  USER_2: ${{ secrets.USER_2 }}
  USER_3: ${{ secrets.USER_3 }}
  USER_4: ${{ secrets.USER_4 }}
  USER_5: ${{ secrets.USER_5 }}
  USER_6: ${{ secrets.USER_6 }}
  USER_7: ${{ secrets.USER_7 }}
  USER_8: ${{ secrets.USER_8 }}

  # Cloud Manager app client ID.
  CLIENT_ID: ${{ secrets.REACT_APP_CLIENT_ID }}
on:
  schedule:
  - cron: "0 13 * * 1-5"

jobs:

  # This job checks environment variables `USER_1` through `USER_8` and
  # constructs a JSON array to be used for the next job's matrix.
  #
  # By using this job to construct the array, we can control the number of test
  # users being used by Cypress dynamically according to the presence of the
  # corresponding secrets.
  #
  # This is particularly useful when running workflows locally, where you may
  # not be able to supply more than one test user.
  generate_users_matrix:
    name: Generate Cypress test user matrix
    runs-on: ubuntu-latest
    steps:
      - name: Generate JSON array of test users
        id: generate_users_array
        run: |
          MAX_USERS=8
          LIST=
          for ((ITER=1;ITER<=MAX_USERS;ITER++)); do
            OAUTH_VAR="USER_$ITER"
            OAUTH="${!OAUTH_VAR}"
            # Only add to matrix if `USER_*` variable is not empty.
            if [ ! -z "${OAUTH}" ]; then
              APPEND="{\"id\": \"$ITER\", \"var\": \"$OAUTH_VAR\"}"
              if [ -z "${LIST}" ]; then
                LIST=${APPEND}
              else
                LIST=${LIST},${APPEND}
              fi
            fi
          done
          # Use GitHub Actions expression to set array of users as output.
          echo ::set-output name=matrix::{\"user\": [$LIST]}
    outputs:
      matrix: ${{ steps.generate_users_array.outputs.matrix }}

  # Runs Cypress.
  run_cypress:
    name: Run Cypress (User ${{ matrix.user.var }})
    needs: generate_users_matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: "${{ fromJson(needs.generate_users_matrix.outputs.matrix) }}"
    steps:
      - name: Say hello
        run: echo '${{ matrix.user.var }}'
