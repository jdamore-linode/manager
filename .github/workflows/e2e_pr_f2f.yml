name: End-to-End Tests
concurrency: UI_TESTS
env:
  # OAuth tokens for up to 8 test users.
  #
  # At least one of these must be defined. If more than one OAuth token is
  # specified, the additional test users are used to parallelize Cypress.
  #
  # For more information, see:
  # - https://docs.cypress.io/guides/continuous-integration/github-actions#Worker-Jobs
  USER_1: ${{ secrets.USER_1 }}
  USER_2: ${{ secrets.USER_2 }}
  USER_3: ${{ secrets.USER_3 }}
  USER_4: ${{ secrets.USER_4 }}
  USER_5: ${{ secrets.USER_5 }}
  USER_6: ${{ secrets.USER_6 }}
  USER_7: ${{ secrets.USER_7 }}
  USER_8: ${{ secrets.USER_8 }}

  # Cypress record key.
  #
  # Optional, but required to record and parallelize Cypress runs.
  CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

  # Cloud Manager app client ID.
  CLIENT_ID: ${{ secrets.REACT_APP_CLIENT_ID }}
on:
  pull_request_target:
  schedule:
    # 1:00 PM UTC (8:00 AM ET) Monday through Friday
    - cron: "0 13 * * 1-5"
  push:
    branches:
      - develop
      - staging
      - master

jobs:

  # This job checks environment variables `USER_1` through `USER_8` and
  # constructs a JSON array to be used for the next job's matrix. It also
  # outputs some related data that can be used elsewhere within the workflow.
  #
  # By using this job to construct the array, we can control the number of test
  # users being used by Cypress dynamically according to the presence of the
  # corresponding secrets.
  #
  # This is useful when running workflows in an environment where you may not
  # be able to supply more than one test user.
  generate_users_matrix:
    name: Generate Cypress user matrix
    runs-on: ubuntu-latest
    steps:
      - name: Generate JSON array of test users
        id: generate_users_array
        run: |
          MAX_USERS=8
          COUNT=0
          PARALLELIZE=false
          LIST=
          RECORD=false
          # Construct JSON array.
          for ((ITER=1;ITER<=MAX_USERS;ITER++)); do
            OAUTH_VAR="USER_$ITER"
            OAUTH="${!OAUTH_VAR}"
            # Only add to matrix if `USER_*` variable is not empty.
            if [ ! -z "${OAUTH}" ]; then
              COUNT=$(($COUNT+1))
              APPEND="{\"id\": \"$ITER\", \"var\": \"$OAUTH_VAR\"}"
              if [ -z "${LIST}" ]; then
                LIST=${APPEND}
              else
                LIST=${LIST},${APPEND}
              fi
            fi
          done
          # Determine whether or not Cypress should be parallelized.
          if [ $COUNT -gt 1 ]; then
            PARALLELIZE=true
          fi
          # Determine whether or not to record Cypress run.
          if [ ! -z "${CYPRESS_RECORD_KEY}" ]; then
            RECORD=true
          fi
          # Use GitHub Actions expression to set output.
          echo ::set-output name=matrix::{\"user\": [$LIST]}
          echo ::set-output name=parallelize::$PARALLELIZE
          echo ::set-output name=record::$RECORD

    outputs:
      # Matrix of test users for Cypress parallelization.
      matrix: ${{ steps.generate_users_array.outputs.matrix }}

      # Whether or not Cypress should be parallelized.
      # 'true' if more than one test user specified, 'false' otherwise.
      parallelize: ${{ steps.generate_users_array.outputs.parallelize }}

      # Whether or not Cypress run should be recorded.
      # 'true' if CYPRESS_RECORD_KEY secret is defined.
      record: ${{ steps.generate_users_array.outputs.record }}

  # Runs Cypress.
  run_cypress:
    name: Run Cypress
    needs: generate_users_matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: "${{ fromJson(needs.generate_users_matrix.outputs.matrix) }}"
    steps:

      # If workflow was triggered via PR, checkout pull request branch.
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
        if: ${{ github.event_name == 'pull_request_target' }}

      # If workflow was triggered via push, checkout affected branch. Otherwise,
      # checkout default branch.
      - uses: actions/checkout@v2
        if: ${{ github.event_name != 'pull_request_target' }}

      - uses: actions/setup-node@v1
        with:
          node-version: "14.17.4"

      - uses: actions/cache@v2
        with:
          path: |
            node_modules
            */*/node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - run: |
          echo "CYPRESS_RECORD_KEY=${{ secrets.CYPRESS_RECORD_KEY }}" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "REACT_APP_LAUNCH_DARKLY_ID=${{ secrets.REACT_APP_LAUNCH_DARKLY_ID }}" >> ./packages/manager/.env
          echo "MANAGER_OAUTH=$${{ matrix.user.var }}" >> ./packages/manager/.env
          echo "REACT_APP_CLIENT_ID=$CLIENT_ID" >> ./packages/manager/.env
          echo "REACT_APP_LOGIN_ROOT=${{ secrets.REACT_APP_LOGIN_ROOT }}" >> ./packages/manager/.env
          echo "REACT_APP_API_ROOT=${{ secrets.REACT_APP_API_ROOT }}" >> ./packages/manager/.env
          echo "REACT_APP_APP_ROOT=${{ secrets.REACT_APP_APP_ROOT }}" >> ./packages/manager/.env
          yarn up &

      - name: Run tests
        uses: cypress-io/github-action@v2
        with:
          working-directory: packages/manager
          wait-on: "http://localhost:3000"
          wait-on-timeout: 1000
          install: false
          browser: chrome
          headless: true
          record: ${{ needs.generate_users_matrix.outputs.record }}
          parallel: ${{ needs.generate_users_matrix.outputs.parallelize }}
